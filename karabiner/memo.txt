macのキー: karavinerが認識するキー

left_control: left_control
left_option: left_option
left_command: left_gui

right_command: right_gui
right_option: right_option
---------------------
新jsonファイルを作成する手順

src/json/に.~.json.erbファイルを新規作成
src/index.html.erbのadd_groupにファイル名等を入力
makeコマンドを実行
docs/json/に.jsonファイルが新規作成されているのを確認する。
ーーーーーーーーーーーー
コメントの書き方

<%# %>
ーーーーーーーーーーーー
karavinerのオリジナルキー設定自分用の公開ページ

https://sisui198202.github.io/KE-complex_modifications/
ーーーーーーーーーーーー
makeするディレクトリ

/Users/mac/Desktop/KE-complex_modifications
ーーーーーーーーーーーー
github フォークしたurl

https://github.com/sisui198202/KE-complex_modifications.git
ーーーーーーーーーーーー
https://sisui198202.github.io/KE-complex_modifications/(自分用の公開ページ)は、どこを読み取って表示されているかの確認

makeコマンドをしたら、下記のディレクトリに、~.jsonファイルが作成される。
/Users/user/Dropbox/iCollections/Folder1/KE-complex_modifications/docs/json

このディレクトリにある、jsonファイルと/Users/user/Dropbox/iCollections/Folder1/KE-complex_modifications/docs/index.htmlのファイルの内容を読み取って表示されている。
---------------------
makeとadd_groupと自分用公開ページの反映の関係

/Users/user/Dropbox/iCollections/Folder1/KE-complex_modifications/src/index.html.erbにあるadd_groupに/Users/user/Dropbox/iCollections/Folder1/KE-complex_modifications/src/json内にあるファイル名を書き込む必要あり。

これをすることによって、https://sisui198202.github.io/KE-complex_modifications/(自分用の公開ページ)にも反映されるようになる。
---------------------
dest_keys_listを複数コマンドで指定する方法

      <%=
               each_key(
                 source_keys_list: ["right_alt"],
                 from_mandatory_modifiers: ["left_control"],
                 dest_keys_list: [["japanese_eisuu","equal_sign"]],
                 as_json: true
               )
       %>
---------------------
aを押したら、b cと入力

"to": [
    { "key_code": "１つ目の処理" },
    { "key_code": "2つ目の処理" }
]


# ex)
{
    "title": "tesuto",
    "rules": [
            {
    "description": "a押したらb,c",
    "manipulators": [
        {
            "type": "basic",
            "from": {
                "key_code": "a"
            },
            "to": [
                { "key_code": "b" },
                { "key_code": "c" }
            ]
        }
    ]
}
    ]
}
---------------------
単独で押した場合と組み合わせで押した場合で違う変換を行う

Macの5つの修飾キー

left_control
left_option:copy
left_command:英数モードに切り替え(IME有効化)
right_command:かな入力モードに切り替え(IME無効化)
right_option(貼り付け)

[left_option]のケース

      "from": {
        "key_code": "left_option",
        "modifiers": { "optional": [ "any" ] }
      },

      "to": [
        {
          "key_code": "left_option",
          "lazy": true
        }
      ],
      "to_if_alone": [
        {
          "key_code": "c",
          "modifiers": [
            "left_command"
          ]

# ex)
{
  "description": "commandキー単体で押したら英数・かなキーに変換。組み合わせで押したらcommandキーとして使う。",
  "manipulators": [
    {
      "type": "basic",
      "from": {
        "key_code": "left_command",
        "modifiers": { "optional": [ "any" ] }
      },
      "to": [
        {
          "key_code": "left_command",
          "lazy": true
        }
      ],
      "to_if_alone": [
        { "key_code": "japanese_eisuu" }
      ]
    },
    {
      "type": "basic",
      "from": {
        "key_code": "right_command",
        "modifiers": { "optional": [ "any" ] }
      },
      "to": [
        {
          "key_code": "right_command",
          "lazy": true
        }
      ],
      "to_if_alone": [
        { "key_code": "japanese_kana" }
      ]
    }
  ]
}
---------------------
強制的にIMEをオフにする
        {
         "key_code": "japanese_eisuu"
        },
ーーーーーーーーーーーー
特定アプリのみにキー割り当て,特定アプリ以外のみにキー割り当て

[erb2json.rb]内にある、def frontmost_applicationの関数内に、
karabiner-Eventviewerの調べたBundle Identtifer名を追加する。
whenに変数名を追加。


ex）
[erb2json.rb]

1
vscode_bundle_identifers = [
    '^com.microsoft.VSCode$'
  ]

2
when 'vscode'
bundle_identifiers.concat(vscode_bundle_identifers)  
ーーーーーーーーーーーー
to_if_alone: ["key_code": "c","modifiers": ["right_command"]],

↓

          "to_if_alone": [
            {
              "key_code": "c",
              "modifiers": [
                "right_command"
              ]
            }
          ]
ーーーーーーーーーーーー
json 書き方　成功パターン

to_if_alone: ["key_code": "c","modifiers": ["right_command"],],

↓

          "to_if_alone": [
            {
              "key_code": "c",
              "modifiers": [
                "right_command"
              ]
            }
          ]

 ーーーーーーーーーーーー
 to_if_alone: ["key_code": ["c","right_command"]],

 ↓変換後

 "to_if_alone": [
                                    {
                                        "key_code": [
                                            "c",
                                            "right_command"
                                        ]
                                    }
                                ],
ーーーーーーーーーーーー
to_if_alone書き方

to_if_alone: ["right_gui"],

↓

to_if_alone: [{"key_code": "right_gui"}],

✳︎
key_codeをデフォルトだと、key_codeを生成してくれない。
ーーーーーーーーーーーー
LeftCommand + space : enter
LeftCommand + RightCommand:=
LeftCommand + Rightoption:+

RightCommand + space :escape
RightCommand + LeftCommand:Backspace
RightCommand + Leftoption:\

不可:RightCommand + Leftcontrol:

Leftoption + space:_
Leftoption + Rightcommand:-
Leftoption + Rightoption:|

Rightoption + space:~
Rightoption + Leftcommand:`
Rightoption + Leftoption:&
ーーーーーーーーーーーー
見本1

{
  "title": "Personal rules (@sisui)",
  "rule_list": false,
  "make_extra_description": true,
  "rules": [
    {
      "description": "Others (Dock, Sleep, Delete, IME, Misison Control, Spotlight)",
      "manipulators": [
        <%# Spotlight %>
        {
          "type": "basic",
          "from": <%= from("f", ["command", "control"]) %>,
          "to": <%= to([["spacebar", ["command"]]]) %>
        }
      ]
    }
  ]
}
ーーーーーーーーーーーー
見本2

{
  "title": "Personal rules (@rcmdnk)",
  "rules": [
    {
      "description": "Change Control-e  to Command-f",
      "manipulators": [
        {
          <%# Control-E to F %>
          "type": "basic",
          "from": <%= from("e", ["control"], []) %>,
          "to": <%= to([["f"]]) %>
        }
      ]
    }
  ]
}
ーーーーーーーーーーーー
見本３ (1つのルールで２つの項目)

{
  "title": "Personal rules (@sisui)",
  "rules": [
    {
      "description": "LeftControl + f_Tab",
      "manipulators": [
        {
          <%# Control-E to F %>
          "type": "basic",
          "from": <%= from("f", ["left_control"], []) %>,
          "to": <%= to([["tab"]]) %>
        }
      ]
    },
   {
      "description": "kana + spacebar_Escape",
      "manipulators": [
        {
          "type": "basic",
          "from": <%= from("spacebar", ["right_gui"], []) %>,
          "to": <%= to([["right_gui"]]) %>
        }
      ]
    }
  ]
}
ーーーーーーーーーーーー
見本４　each_keyを使った例

{
  "title": "Personal rules (@sisui)",
  "rules": [
    {
      "description": "LeftControl + f_Tab",
      "manipulators": [
        {
          <%# Control-E to F %>
          "type": "basic",
          "from": <%= from("f", ["left_control"], []) %>,
          "to": <%= to([["tab"]]) %>
        }
      ]
    },
   {
      "description": "kana + spacebar_Escape",
      "manipulators": [
        {
          "type": "basic",
          "from": <%= from("spacebar", ["right_gui"], []) %>,
          "to": <%= to([["right_gui"]]) %>
        }
      ]
    },
    {
      "description": "Change cmd-ctrl-h/j/k/l to arrow keys",
      "manipulators":
      <%=
               each_key(
                 source_keys_list: ["z", "x", "c", "v"],
                 dest_keys_list: ["0", "1", "2", "3","4"],
                 from_mandatory_modifiers: ["right_gui", "right_gui","right_gui","right_gui"],
                 to_if_alone: ["right_gui","right_gui","right_gui","right_gui"],
                 as_json: true
               )
       %>
    }
  ]
}
ーーーーーーーーーーーー
見本５(数字まで実装分)

{
  "title": "Personal rules (@sisui)",
  "rules": [
    {
      "description": "LeftControl + f_Tab",
      "manipulators": [
        {
          <%# Control-E to F %>
          "type": "basic",
          "from": <%= from("f", ["left_control"], []) %>,
          "to": <%= to([["tab"]]) %>
        }
      ]
    },
   {
      "description": "kana + spacebar_Escape",
      "manipulators": [
        {
          "type": "basic",
          "from": <%= from("spacebar", ["right_gui"], []) %>,
          "to": <%= to([["right_gui"]]) %>
        }
      ]
    },
    {
      "description": "numbers_0-9",
      "manipulators":
      <%=
               each_key(
                 source_keys_list: ["z", "x", "c", "v","s","d","f","w","e","r"],
                 dest_keys_list: ["0", "1", "2", "3","4","5","6","7","8","9"],
                 from_mandatory_modifiers: ["right_gui"],
                 to_if_alone: ["right_gui"],
                 as_json: true
               )
       %>
    }
  ]
}
ーーーーーーーーーーーー
型

{
  "title": "$1",
  "rule_list": false,
  "make_extra_description": true,
  "rules": [
    {
      "description": "$2",
      "manipulators": [
        <%# Spotlight %>
        {
          "type": "basic",
          "from": <%= from("$3", ["$4", "$5"]) %>,
          "to": <%= to([["$6", ["$7"]]]) %>
        }
      ]
    }
  ]
}
ーーーーーーーーーーーー
make,make rebuild

make

make rebuild
ーーーーーーーーーーーー
アプリケーション一覧からセレクトで選択したアプリを
アクティブ全面に表示

AppSelect

LeftCommand + ._AppSelect

From
	Key Code:.(ドット)
	Mandatory Modifiers:Left Control

To
	Key Code:Tab Key
	Modifiers:Right Command
	Additional Options:Halt

To If Alone Events
	Key Code(optional):Left Control

-----------------------------------------------
.rbのファイル

Rubyの拡張子で使用するもの
ーーーーーーーーーーーー

デフォルトショットカットキー

command + a すべてを選択

ーーーーーーーーーーーー
キー置き換え


:leftshift x 2
:rightshift x 2


$:Leftcommand + space
:Leftcommand + かな
:Leftcommand + Rightcommand

enter:英数 + space
"":英数 + かな
':英数 + rightcommand


escape:かな x space
backspace:かな + 英数
=:かな + leftcommand

ーーーーーーーーーーーー
karaviner	実際に入力されるキー

backslash → ]
fn → fn
escape → escape
hyphen → -
equal_sign → ^
open_braket_[ → @
close_braket_] → [
non_us_pound → ]
semicon; → ;
quote → :_koron
tiruda → `
comma → ,
period → .
ーーーーーーーーーーーー
to/lazy
---2017 年 11 月 17 日追記---

"key_code"とセットで使う設定で、設定する値はtrueまたはfalseです。
trueまたはfalseを指定した場合の動作の違いは、以下のとおりです。

trueを指定
"to"の設定が実行されるタイミングが、"from"に設定したキーを押した時点ではなく、"from"で設定したキーを押しながら別のキーを押した時点になります。

設定例（"lazy": true)

{
  "type": "basic",
  "from": { "key_code": "right_command" },
  "to": [
    {
      "key_code": "right_control",
      "lazy": true
    }
  ]
}
実際の動作

"右 Command" を押した時点では何も起きない
そのまま "右 Command" を押しながら別のキーを押した時点で、"右 Command" が "右 control" に変換される
(例）"右 Command-H" で "右 control-H" に変換される
falseを指定
"to"の設定が実行されるタイミングが、"from"に設定したキーを押した時点になります。これは"lazy"を指定しない場合と同じ動作です。

設定例（"lazy": false)


{
  "type": "basic",
  "from": { "key_code": "right_command" },
  "to": [
    {
      "key_code": "right_control",
      "lazy": false
    }
  ]
}
実際の動作

右 Command を押した時点で、右 Command を右 control に変換する
---------------------
to/mouse_key
---2018 年 5 月 6 日追加---

マウスカーソルの移動やホイールスクロールを割り当てる場合に使う機能です。なお、マウスクリックは、"to/pointing_button"で実現します。


//マウスカーソルの移動
"to": [ { "mouse_key": { "x": -960 } }
  //"x"で横方向への移動。正の数値で右に、負の数値で左に移動。
  //"y"で縦方向への移動。正の数値で下に、負の数値で上に移動。
]

//ホイールスクロールを実現
"to": [
  { "mouse_key": { "horizontal_wheel": 64 } }
  //"vertical_wheel"で上下のスクロール。正の数値で下に、負の数値で上にスクロール。
  //"horizontal_wheel"で左右のスクロール。正の数値で左に、負の数値で右にスクロール。
]

//マウスの左クリックを実現
"to": [
  { "pointing_button": "button1" }
]
---------------------
左 command"を 2000 ミリ秒押し続けると、"英数"への変換はキャンセルされる

to_if_alone/key_code, modifiers
上記の"to"と同様です。

//設定例
"from": {
  "key_code": "left_command",
  "modifiers": {
    "optional": [ "any" ]
  }
},
"to": [
  {"key_code": "left_command"}
],
"parameters": {
  "basic.to_if_alone_timeout_milliseconds": 2000,
},
"to_if_alone": [
  {"key_code": "japanese_eisuu"}
]
"左 Command"を単独で押した場合は"英数"に変換し、他のと組み合わせて押した場合は、他のキーはそのまま変換後に引き継ぎ（"optional"に"any"を指定）し、"左 Command"は"左 Command"("to"の"key_code"に"left_command"を指定）として扱うという設定。"左 command"を 2000 ミリ秒押し続けると、"英数"への変換はキャンセルされます。
---------------------
特定のアプリだけ（または特定のアプリ以外）でキー変換を実行したい場合

//設定例
"conditions": [
  {
    "type": "frontmost_application_if",
    "bundle_identifiers": [ "^com\\.apple\\.Safari" ]
  }
]
---------------------
変数の値が特定の値の場合（または特定の値以外の場合）に変換を実行したい場合

"D"を押している間は、"J, K, H, L"を上下左右キーに変換する
"Escape"を押したら Vi ライクな操作を可能にし、もう一度"Escape"を押したら通常の操作に戻す
"PrintScreen"単独で押したらスクリーンショット撮影のみ行い、"PrintScreen-P"を押すとスクリーンショット撮影後にプレビューする
Emacs の"control-x control-f"のような 2 段階のキーストロークを実現する
//設定例
"from": {
  "key_code": "s",
  "modifiers": {
    "optional": [ "caps_lock" ]
  }
},
"to": [
  {
    "set_variable": {    //変数に値をセットする箇所
      "name": "vi_mode",
      "value": 1         //ここで変数に値を格納する
    }
  }
],
"to_after_key_up": [
  {
    "set_variable": {
      "name": "vi_mode",
      "value": 0
    }
  }
]
},
{
"type": "basic",
"from": {
  "key_code": "h",
  "modifiers": {
    "optional": [ "caps_lock" ]
  }
},
"to": [
  { "key_code": "left_arrow" }
],
"conditions": [
  {
    "type": "variable_if",  //上記で設定した変数を評価
    "name": "vi_mode",      //vi_mode変数が1 = Sキーを押している状態
    "value": 1              //Sキーが押されているので、"to"で指定した変換を実行
  }
]
pqrs-org/KE-complex_modificationsにある"vi_mode"の設定から抜粋（"S"キーを押しながら"H"キーを押すと左矢印に変換するという設定 )
---------------------
MultitouchExtension
2019 年 10 月 7 日追加

Ver.12.6.9 から使用可能になった機能です。この機能は、MacBook のタッチパッドに何本の指でタッチしているか、タッチパッドの左（右）半分 or 上（下）半分に何本の指でタッチしているかという情報を取得できるというものです。

この機能を使うと、タッチパッドに触れているときだけ"J, K, H, L"キーをカーソルキーに変換したり、タッチパッドをファンクションキーの代わりに使うといった設定ができます。

この機能を使う際は、まず Karabiner-Elements の設定画面の「Misc」から「Open Karabiner-MultitouchExtension app」を起動しておく必要があります。このアプリが起動していると、タッチパッドに触れている指の本数などが次の変数に格納されます。

変数名	説明
multitouch_extension_finger_count_total	タッチパッドに触れている指の本数が格納されます。
multitouch_extension_finger_count_left_half_area	タッチパッドの左半分に触れている指の本数が格納されます。
multitouch_extension_finger_count_right_half_area	タッチパッドの右半分に触れている指の本数が格納されます。
multitouch_extension_finger_count_upper_half_area	タッチパッドの上半分に触れている指の本数が格納されます。
multitouch_extension_finger_count_lower_half_area	タッチパッドの下半分に触れている指の本数が格納されます。
---------------------
toに複数コマンドで出力させる方法

"to": <%= to([["button1"],["button1"]]) %>,
↓(出力結果)
          "to": [
            {
              "pointing_button": "button1"
            },
            {
              "pointing_button": "button1"
            }
          ],